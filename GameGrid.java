package Bomberman;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class GameGrid extends JPanel {
    private int rows;
    private int cols;
    private int cellSize;
    private Color[][] cellColors;
    private Player player; // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á Player ‡πÅ‡∏ó‡∏ô
    private int playerBombCount = 1; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    private int playerExplosionRange = 2; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà 2 ‡πÉ‡∏ô Bomb.java)
    public List<PowerUp> activePowerUps; // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Power-up ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Timer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Game Loop
    private Timer gameTimer;
    private final int FRAME_RATE = 60; // 60 ‡πÄ‡∏ü‡∏£‡∏°‡∏ï‡πà‡∏≠‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    private Image playerImage;
    private Image bombImage;
    private Image enemyImage;
    private List<Enemy> enemies = new ArrayList<>();
    private Enemy enemy;

    public char[][] map;

    public GameGrid(int rows, int cols, int cellSize) {
    this.rows = rows;
    this.cols = cols;
    this.cellSize = cellSize;
    this.cellColors = new Color[rows][cols];

    // Initialize the map before creating the enemy
    initializeMap();

    // Create the player and enemy after the map is initialized
    player = new Player(1, 1); // Player's initial position
    enemy = new Enemy(map, 7, 3, this); // Create the enemy at (7, 3) with the initialized map
    enemy.start(); // Start enemy movement
    setPreferredSize(new Dimension(cols * cellSize, rows * cellSize));

        playerImage = new ImageIcon("C:/Users/lolma/Desktop/work/project/Bomberman/static/player.png").getImage();
        bombImage = new ImageIcon("C:/Users/lolma/Desktop/work/project/Bomberman/static/bomb.gif").getImage();
        enemyImage = new ImageIcon("C:/Users/lolma/Desktop/work/project/Bomberman/static/pontan.png").getImage();

        activePowerUps = new ArrayList<>(); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô List
        initializeMap();
        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        clearPlayerSpawnArea(player.getRow(), player.getCol(), 1); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå 3x3 ‡∏£‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô

        generateRandomBoxes(30);
        Enemy initialEnemy = new Enemy(map, 7, 3, this);
        initialEnemy.start();
        enemies.add(initialEnemy);
        startEnemySpawner();

        setFocusable(true); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö KeyEvent ‡πÑ‡∏î‡πâ
        // ‡πÉ‡∏ä‡πâ KeyListener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏î/‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏õ‡∏∏‡πà‡∏°
        addKeyListener(new java.awt.event.KeyAdapter() {
            @Override
            public void keyPressed(java.awt.event.KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP -> player.setMovingUp(true);
                    case KeyEvent.VK_DOWN -> player.setMovingDown(true);
                    case KeyEvent.VK_LEFT -> player.setMovingLeft(true);
                    case KeyEvent.VK_RIGHT -> player.setMovingRight(true);
                    case KeyEvent.VK_SPACE -> placeBomb();
                }
            }

            @Override
            public void keyReleased(java.awt.event.KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_UP -> player.setMovingUp(false);
                    case KeyEvent.VK_DOWN -> player.setMovingDown(false);
                    case KeyEvent.VK_LEFT -> player.setMovingLeft(false);
                    case KeyEvent.VK_RIGHT -> player.setMovingRight(false);
                }
            }
        });

        // *** ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° Game Timer ***
        gameTimer = new Timer(1000 / FRAME_RATE, e -> updateGame()); // Timer ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å updateGame() ‡∏ó‡∏∏‡∏Å‡πÜ 1/FRAME_RATE //
                                                                     // ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        gameTimer.start();
    }

    private void startEnemySpawner() {
    new Thread(() -> {
        Random rand = new Random();
        while (true) {
            try {
                Thread.sleep(10000); // Spawn every 10 seconds

                // Check if there are already 4 enemies on the map
                if (enemies.size() >= 4) {
                    System.out.println("‚ùå Cannot spawn more enemies. Maximum limit reached.");
                    continue; // Skip spawning if the limit is reached
                }

                for (int i = 0; i < 4; i++) { // up to 20 attempts
                    int r = rand.nextInt(map.length);
                    int c = rand.nextInt(map[0].length);
                    if (map[r][c] == ' ') {
                        Enemy e = new Enemy(map, r, c, this);
                        e.start();
                        enemies.add(e); // Add the new enemy to the list
                        System.out.println("üëæ Spawned enemy at (" + r + "," + c + ")");
                        break; // Exit the loop once an enemy is spawned
                    }
                }

            } catch (InterruptedException e) {
                e.printStackTrace();
                break;
            }
        }
    }).start();
    }   


    // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°
    private void updateGame() {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (‡∏ï‡∏≤‡∏°‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå)
        updatePlayerMovement();

        // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏° logic ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        // ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï AI ‡∏Ç‡∏≠‡∏á‡∏®‡∏±‡∏ï‡∏£‡∏π, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï animation, ‡∏Ø‡∏•‡∏Ø

        repaint(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repaint ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡πÄ‡∏ü‡∏£‡∏°
    }

    public void setCellColor(int row, int col, Color color) {
        if (row >= 0 && row < rows && col >= 0 && col < cols) {
            cellColors[row][col] = color;
            repaint();
        }
    }

    private void generateRandomBoxes(int numBoxes) {
        Random rand = new Random();
        int boxesPlaced = 0;

        while (boxesPlaced < numBoxes) {
            int r = rand.nextInt(rows);
            int c = rand.nextInt(cols);

            // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: ‡πÑ‡∏°‡πà‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å 3x3 ‡∏£‡∏≠‡∏ö (playerRow, playerCol) ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (r >= player.getRow() - 1 && r <= player.getRow() + 1 &&
                    c >= player.getCol() - 1 && c <= player.getCol() + 1) {
                continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            }

            if (map[r][c] == ' ') { // ‡∏ß‡∏≤‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                map[r][c] = 'X';
                boxesPlaced++;
            }
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                char tile = map[row][col];
                switch (tile) {
                    case '#' -> g.setColor(Color.DARK_GRAY); // Wall
                    case 'X' -> g.setColor(new Color(160, 82, 45)); // ‡∏Å‡∏•‡πà‡∏≠‡∏á (‡∏™‡∏µ‡πÑ‡∏°‡πâ)
                    case 'B' -> {
                        g.drawImage(bombImage, col * cellSize, row * cellSize, cellSize, cellSize, null);
                        continue;
                    } // Bomb
                    case '*' -> g.setColor(Color.RED); // Explosion
                    default -> g.setColor(Color.LIGHT_GRAY); // Empty
                }

                g.fillRect(col * cellSize, row * cellSize, cellSize, cellSize);
                g.setColor(Color.BLACK);
                g.drawRect(col * cellSize, row * cellSize, cellSize, cellSize);
            }
        }
        // ‡∏ß‡∏≤‡∏î Power-ups
        for (PowerUp pu : activePowerUps) {
            // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Power-up ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏î‡πâ
            // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            switch (pu.getType()) {
                case BOMB_COUNT -> g.setColor(Color.BLUE);
                case EXPLOSION_RANGE -> g.setColor(Color.ORANGE);
                case SPEED -> g.setColor(Color.GREEN);
            }
            g.fillOval(pu.getCol() * cellSize + cellSize / 4, pu.getRow() * cellSize + cellSize / 4, cellSize / 2,
                    cellSize / 2);
        }
        g.drawImage(playerImage, player.getCol() * cellSize, player.getRow() * cellSize, cellSize, cellSize, null);
        g.setColor(Color.BLACK);
        g.drawRect(player.getCol() * cellSize, player.getRow() * cellSize, cellSize, cellSize);
        for (Enemy e : enemies) {
            g.drawImage(enemyImage, e.getCol() * cellSize, e.getRow() * cellSize, cellSize, cellSize, null);
        }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï placeBomb ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Player object
    // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á placeBomb
    public void placeBomb() {
        int currentBombsOnMap = 0;
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (map[r][c] == 'B') {
                    currentBombsOnMap++;
                }
            }
        }

        // ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏≤‡∏á‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
        if (map[player.getRow()][player.getCol()] == ' ' && currentBombsOnMap < playerBombCount) {
            map[player.getRow()][player.getCol()] = 'B';
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á repaint ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Game Loop ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repaint ‡πÄ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡πÄ‡∏ü‡∏£‡∏°
            new Bomb(map, player.getRow(), player.getCol(), this, playerExplosionRange).start();
        }
    }

    @Override
    public void addNotify() {
        super.addNotify();
        requestFocus();
    }

    // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    private void updatePlayerMovement() {
        long currentTime = System.currentTimeMillis();
        int dRow = 0;
        int dCol = 0;

        if (player.isMovingUp())
            dRow = -1;
        else if (player.isMovingDown())
            dRow = 1;
        else if (player.isMovingLeft())
            dCol = -1;
        else if (player.isMovingRight())
            dCol = 1;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if ((dRow != 0 || dCol != 0) && (currentTime - player.getLastMoveTime() >= player.getCurrentMoveDelay())) {
            int newRow = player.getRow() + dRow;
            int newCol = player.getCol() + dCol;

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï
            if (newRow < 0 || newRow >= rows || newCol < 0 || newCol >= cols) {
                // ‡∏ä‡∏ô‡∏Ç‡∏≠‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                return;
            }

            char targetTile = map[newRow][newCol];

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà: ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á, Power-up, ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î
            // (‡∏ñ‡πâ‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏±‡∏ö)
            if (targetTile == ' ' || isPowerUpAt(newRow, newCol) || targetTile == 'B') {
                player.setRow(newRow); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
                player.setCol(newCol);
                player.setLastMoveTime(currentTime); // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                checkAndCollectPowerUp(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö Power-up
            }
        }
    }

    private boolean isPowerUpAt(int r, int c) {
        for (PowerUp pu : activePowerUps) {
            if (pu.getRow() == r && pu.getCol() == c) {
                return true;
            }
        }
        return false;
    }

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á checkAndCollectPowerUp
    private void checkAndCollectPowerUp() {
        PowerUp collectedPowerUp = null;
        synchronized (activePowerUps) {
            for (PowerUp pu : activePowerUps) {
                if (pu.getRow() == player.getRow() && pu.getCol() == player.getCol()) {
                    collectedPowerUp = pu;
                    break;
                }
            }

            if (collectedPowerUp != null) {
                activePowerUps.remove(collectedPowerUp);
                switch (collectedPowerUp.getType()) {
                    case BOMB_COUNT -> playerBombCount++;
                    case EXPLOSION_RANGE -> playerExplosionRange++;
                    case SPEED -> player.decreaseMoveDelay(20); // ‡∏•‡∏î‡∏Ñ‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏•‡∏á 20ms
                }
                System.out.println("Collected Power-up: " + collectedPowerUp.getType() +
                        ", Bomb Count: " + playerBombCount +
                        ", Explosion Range: " + playerExplosionRange +
                        ", Current Move Delay: " + player.getCurrentMoveDelay() + "ms");
            }
        }
    }

    // *** ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏´‡∏•‡∏±‡∏Å ***
    private void initializeMap() {
        map = new char[rows][cols]; // ‡∏™‡∏£‡πâ‡∏≤‡∏á map array ‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤

        // ‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (' ') ‡∏Å‡πà‡∏≠‡∏ô
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                map[r][c] = ' ';
            }
        }

        // ‡πÉ‡∏™‡πà‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏£‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å
        for (int c = 0; c < cols; c++) {
            map[0][c] = '#'; // ‡πÅ‡∏ñ‡∏ß‡∏ö‡∏ô‡∏™‡∏∏‡∏î
            map[rows - 1][c] = '#'; // ‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î
        }
        for (int r = 0; r < rows; r++) {
            map[r][0] = '#'; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
            map[r][cols - 1] = '#'; // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤‡∏™‡∏∏‡∏î
        }

        // ‡πÉ‡∏™‡πà‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏ó‡∏∂‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏•‡∏±‡∏ö‡∏Å‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏ó‡∏∂‡∏ö (Block walls) ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà (‡∏Ñ‡∏µ‡πà, ‡∏Ñ‡∏µ‡πà)
        for (int r = 2; r < rows - 1; r += 2) {
            for (int c = 2; c < cols - 1; c += 2) {
                map[r][c] = '#';
            }
        }
    }

    public void addPowerUp(PowerUp powerUp) {
        synchronized (activePowerUps) {
            activePowerUps.add(powerUp);
        }
    }

    // *** ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô ***
    private void clearPlayerSpawnArea(int playerStartRow, int playerStartCol, int clearRadius) {
        for (int r = playerStartRow - clearRadius; r <= playerStartRow + clearRadius; r++) {
            for (int c = playerStartCol - clearRadius; c <= playerStartCol + clearRadius; c++) {
                if (r >= 0 && r < rows && c >= 0 && c < cols && map[r][c] != '#') { // ‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ö‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏´‡∏•‡∏±‡∏Å
                    map[r][c] = ' ';
                }
            }
        }
    }

    public Player getPlayer() {
        return player;
    }

    public char[][] getMap() {
        return map;
    }

    public void refresh() {
        repaint();
    }

    public List<Enemy> getEnemies() {
        return enemies;
    }

}